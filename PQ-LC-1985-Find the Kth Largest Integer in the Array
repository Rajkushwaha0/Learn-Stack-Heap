import java.math.BigInteger;
class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        PriorityQueue<BigInteger> max = new PriorityQueue<>();
        for(int i=0;i<nums.length;i++){
            max.offer(new BigInteger(nums[i]));
        }
        int n=nums.length;
        int j=0;
        while(j++ < n-k){
            max.poll();
        }
        return max.poll().toString();
    }
}

//More Optimize
class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        PriorityQueue<String> minHeap = new PriorityQueue<>((s1, s2) -> {
            if (s1.length() == s2.length()) 
                return s1.compareTo(s2);
            else
                return Integer.compare(s1.length(), s2.length());
        });
        for(int i=0;i<nums.length;i++){
            minHeap.offer(nums[i]);
            if(minHeap.size()>k) minHeap.poll();
        }
        
        return minHeap.poll();
    }
}
